<?php

declare(strict_types=1);

/*
 * ServiceLayerUOCLib
 *
 * This file was automatically generated by APIMATIC v3.0 ( https://www.apimatic.io ).
 */

namespace ServiceLayerUOCLib\Controllers;

use Core\Request\Parameters\BodyParam;
use CoreInterfaces\Core\Request\RequestMethod;
use ServiceLayerUOCLib\Exceptions\ApiException;
use ServiceLayerUOCLib\Models\ActualizarRequest1;
use ServiceLayerUOCLib\Models\CrearNuevoRequest1;
use ServiceLayerUOCLib\Server;

class QuotationsController extends BaseController
{
    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function listarTodos(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/Quotations')->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function verCotizaciN(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::GET, '/Quotations(123)')->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }

    /**
     * @param CrearNuevoRequest1 $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function crearNuevo(CrearNuevoRequest1 $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Quotations')
            ->server(Server::SERVER_3)
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @param ActualizarRequest1 $body
     *
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function actualizar(ActualizarRequest1 $body): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::PATCH, '/Quotations(123)')
            ->server(Server::SERVER_3)
            ->parameters(BodyParam::init($body));

        $this->execute($_reqBuilder);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cerrar(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Quotations(123)/Close')->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function cancelar(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Quotations(123)/Cancel')->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function reabrir(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Quotations(123)/Reopen')->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }

    /**
     * @return void Response from the API call
     *
     * @throws ApiException Thrown if API call fails
     */
    public function generarDocumentoDeCancelaciN(): void
    {
        $_reqBuilder = $this->requestBuilder(RequestMethod::POST, '/Quotations(123)/CreateCancellationDocument')
            ->server(Server::SERVER_3);

        $this->execute($_reqBuilder);
    }
}
